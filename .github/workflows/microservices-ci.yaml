name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

jobs:
  # Node.js Services Testing
  test-node-services:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        service: [
          {
            "name": "authentication-service", 
            "path": "backend/loginPage", 
            "port": 5001
          },
          {
            "name": "engagement-hub", 
            "path": "backend/engagement-hub", 
            "port": 5002
          },
          {
            "name": "focus-mode-service", 
            "path": "backend/focus-mode", 
            "port": 5005
          },
          {
            "name": "rewards-system", 
            "path": "backend/reward-system", 
            "port": 5006
          }
        ]
        node-version: [20.x]

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service.path }}/package-lock.json'
    
    - name: Install dependencies
      working-directory: ${{ matrix.service.path }}
      run: npm ci
    
    - name: Lint
      working-directory: ${{ matrix.service.path }}
      run: npm run lint || echo "Linting skipped"
    
    - name: Run tests
      working-directory: ${{ matrix.service.path }}
      run: npm test || echo "No tests configured"
      env:
        PORT: ${{ matrix.service.port }}

  # Python Services Testing
  test-python-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [
          {
            "name": "productivity-tracker", 
            "path": "backend/productivity-tracker", 
            "port": 5000
          }
        ]
        python-version: ['3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      working-directory: ${{ matrix.service.path }}
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      working-directory: ${{ matrix.service.path }}
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      working-directory: ${{ matrix.service.path }}
      run: |
        if [ -d tests ]; then
          pytest
        else
          echo "No tests configured"
        fi
      env:
        PORT: ${{ matrix.service.port }}

  # Build and Push Node.js Services
  build-push-node-services:
    needs: test-node-services
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [
          {
            "name": "authentication-service", 
            "path": "backend/loginPage", 
            "port": 5001
          },
          {
            "name": "engagement-hub", 
            "path": "backend/engagement-hub", 
            "port": 5002
          },
          {
            "name": "focus-mode-service", 
            "path": "backend/focus-mode", 
            "port": 5005
          },
          {
            "name": "rewards-system", 
            "path": "backend/reward-system", 
            "port": 5006
          }
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.path }}
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service.name }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service.name }}:${{ github.sha }}
        build-args: |
          PORT=${{ matrix.service.port }}

  # Build and Push Python Services
  build-push-python-services:
    needs: test-python-services
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: [
          {
            "name": "productivity-tracker", 
            "path": "backend/productivity-tracker", 
            "port": 5000
          }
        ]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.service.path }}
        push: true
        tags: |
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service.name }}:latest
          ${{ secrets.DOCKERHUB_USERNAME }}/${{ matrix.service.name }}:${{ github.sha }}
        build-args: |
          PORT=${{ matrix.service.port }}

  # Optional: Deployment Job
  deploy:
    needs: 
      - build-push-node-services
      - build-push-python-services
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Server
      run: |
        echo "Deploying services"
        # Add your deployment commands here

  # Create GitHub Release
  release:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.sha }}
        release_name: Release ${{ github.sha }}
        draft: false
        prerelease: false