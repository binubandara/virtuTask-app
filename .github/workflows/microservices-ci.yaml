name: Microservices CI/CD Pipeline

on:
  push:
    branches: [ "main", "develop" ]
  pull_request:
    branches: [ "main", "develop" ]

# Define the services
env:
  NODE_SERVICES: |
    [
      {"name": "authentication-service", "path": "backend/authentication-service", "port": 5001},
      {"name": "engagement-hub", "path": "backend/engagement-hub", "port": 5002},
      {"name": "focus-mode-service", "path": "backend/focus-mode-service", "port": 5005},
      {"name": "rewards-system", "path": "backend/rewards-system", "port": 5006}
    ]
  PYTHON_SERVICES: |
    [
      {"name": "productivity-tracker", "path": "backend/productivity-tracker", "port": 5000}
    ]

jobs:
  # Node.js Services Testing
  test-node-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(env.NODE_SERVICES) }}
        node-version: [20.17.0]

    defaults:
      run:
        working-directory: ${{ matrix.service.path }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        cache-dependency-path: '${{ matrix.service.path }}/package-lock.json'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint
    
    - name: Run tests
      run: npm test
      env:
        PORT: ${{ matrix.service.port }}
    
    - name: Code coverage
      uses: codecov/codecov-action@v4
      with:
        files: ${{ matrix.service.path }}/coverage/coverage-final.json
        flags: ${{ matrix.service.name }}

  # Python Services Testing
  test-python-services:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: ${{ fromJSON(env.PYTHON_SERVICES) }}
        python-version: ['3.13.0-alpha.3']

    defaults:
      run:
        working-directory: ${{ matrix.service.path }}

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Test with pytest
      run: |
        pytest
      env:
        PORT: ${{ matrix.service.port }}

  # Build and Push Node.js Services
  build-push-node-services:
    needs: test-node-services
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: ${{ fromJSON(env.NODE_SERVICES) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20.17.0
    
    - name: Build Docker Image
      run: |
        docker build \
          --build-arg PORT=${{ matrix.service.port }} \
          -t ${{ matrix.service.name }}:latest \
          ${{ matrix.service.path }}
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Push to Docker Hub
      run: |
        docker tag ${{ matrix.service.name }}:latest binubandara/${{ matrix.service.name }}:${{ github.sha }}
        docker push binubandara/${{ matrix.service.name }}:${{ github.sha }}

  # Build and Push Python Services
  build-push-python-services:
    needs: test-python-services
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service: ${{ fromJSON(env.PYTHON_SERVICES) }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.13
      uses: actions/setup-python@v5
      with:
        python-version: '3.13.0-alpha.3'
    
    - name: Build Docker Image
      run: |
        docker build \
          --build-arg PORT=${{ matrix.service.port }} \
          -t ${{ matrix.service.name }}:latest \
          ${{ matrix.service.path }}
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Push to Docker Hub
      run: |
        docker tag ${{ matrix.service.name }}:latest binubandara/${{ matrix.service.name }}:${{ github.sha }}
        docker push binubandara/${{ matrix.service.name }}:${{ github.sha }}

  # Optional: Deployment Job
  deploy:
    needs: 
      - build-push-node-services
      - build-push-python-services
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Deploy to Kubernetes
      run: |
        echo "Deploying services to Kubernetes"
        # Add your Kubernetes deployment commands here
        # Example:
        # kubectl set image deployment/authentication-service authentication-service=binubandara/authentication-service:${{ github.sha }}